【javaWeb的发展历程】
    1. servlet出现之前
        上世纪90年代，互联网发展非常迅速，基本上都是基于B/S架构火爆起来的。
        所以，刚开始的时候，用户使用浏览器向web服务器发送请求基本上都是得到的静态资源，比如：HTML、CSS等
        这个时候人们根据不同的需求需要服务器返回不同的数据，所以人们迫切的需要推出一种新的技术来实现动态代理的处理。
    2. Servlet出现了
        SUN公司，推出了JavaEE，顺便也推出了Servlet
        但这个时候的Servlet，他把所有的业务逻辑，页面跳转，以及页面的样式表现全都混杂了一个类中，这样看的话代码非常麻烦，不利于代码阅读
        Servlet可以动态的回应网页，方式就是书写大量的out代码，不断地书写各种html标签，所以代码非常冗余
        借鉴了微软的ASP，推出了JSP
    3. JSP
        采用了HTML语言直接生成一个页面，还可以使用<% %>语句，在页面中嵌入java代码，所以其本质上，JSP还是一个Servlet
        虽然JSP可可以实现网页的开发，但依然存在缺点
        不利于代码的维护，而且，代码没有办法共享
        前端人员看不大懂后端代码
        servlet开发人员也需要在复杂的JSP中找到能写Servlet代码的地方
    4. JSP + JavaBean
        JavaBean的出现，是为了和数据库进行交互，所出现的类
        JSP中可以写一些Java的代码用来转发操作，以及HTML页面的代码生成，那么，数据的获取方式和部分的业务逻辑就可以剥离出来交给JavaBean来实现
        但是，JSP缺点依然存在，在JSP中，处理视图层和控制层的相关业务，这两个层的业务之间耦合度非常高，代码依然不利于维护
    5. Servlet + JSP + JavaBean
        到了这种模式下，在JSP页面中就不需要使用<% %>语句了,包括<%= %>标签都不需要了,全部使用了EL表达式
        列表的遍历,以及条件的判断等业务,我们可以使用 标签JSTL来代替之前的Java代码
        JSP: 相当于view视图
        Servlet: 相当于controller控制器
        但是这个时候,JavaBean中的代码还是比较臃肿的,所以还不能作为Model模型,需要对JavaBean进行再一次的分割:业务逻辑和数据持久化
    6. 三层架构 和 MVC设计模式
        三层架构: 业务逻辑层,数据持久层,表现层[软件系统的整体设计上进行的分层]
        MVC设计: 模型,视图,控制器[全部都是体现在三层架构中的表现层中]
            Model模型: 封装的是数据源以及基于对这些数据源的相关操作
            View视图: 封装的是对数据源Model的一种显示,也就是用于将Model数据渲染到用户界面
            Controller控制器: 封装的是外界用户作用于模型的操作,控制器就是在View和Model之间进行沟通的桥梁,用户在View上操作数据,然后控制器转发给Model
                                这种模式下,View和Model之间就实现了代码的分离,也就是[松耦合]
[总结] 从静态资源一直发展到三层架构,其实最终的目的都是为了实现[高内聚,低耦合]
    ok,那么接下来的发展,我们就看到了框架技术的出现;

Spring框架
    spring是一个分层的JavaSE/EE应用,是一个full_stack轻量级框架
    full_stack: 一站式的框架
    一IOC和AOP为内核的框架

    SpringMVC,持久层Spring JDBCTemplate

    罗德 约翰逊 称之为Spring之父
    Spring的通用版本5.0
        解耦性非常强,特别简单
        AOP面向企业变成

        声明式事务的支持

        测试

        MVC三层模式  其实也属于高耦合[new是一种高耦合的标记]

        Spring框架快速入门
            1. 导包
            2. 编写Dao层
            3. Spring核心配置文件
            4. Spring配置文件配置全限定名
            5. 通过Spring的api获得Bean